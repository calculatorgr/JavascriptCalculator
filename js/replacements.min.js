replacements={};const anglesConfig={rad:"Angles and arcs are measured in radians, click here to change it.",deg:"Angles and arcs are measured in degrees, click here to change it.",grad:"Angles and arcs are measured in gradients, click here to change it.",unit:"rad",getDescr:function(e){switch(e){case"rad":return this.rad;case"deg":return this.deg;case"grad":return this.grad}},toggleUnit:function(){switch(this.unit){case"rad":this.unit="deg";break;case"deg":this.unit="grad";break;case"grad":this.unit="rad"}}},fns1=["sin","cos","tan","sec","cot","csc"];fns1.forEach(function(e){let a=math[e],r=function(e){var r;switch(anglesConfig.unit){case"deg":r=a(math.mod(e,360)*math.PI/180);break;case"grad":r=a(math.mod(e,400)*math.PI/200);break;default:r=e/math.tau,r=a(r=math.abs(r)>1?e-math.floor(r)*math.tau:e)}return 1e-10>math.abs(r)?0:r};replacements[e]=math.typed(e,{"number | Complex":r,"Array | Matrix":function(e){return math.map(e,r)}})});const fns2=["asin","acos","atan","atan2","acot","acsc","asec","arg"];fns2.forEach(function(e){let a=math[e],r=function(e){let r=a(e);if("number"==typeof r)switch(anglesConfig.unit){case"deg":return r/2/Math.PI*360;case"grad":return r/2/Math.PI*400}return r};replacements[e]=math.typed(e,{"number | Complex":r,"Array | Matrix":function(e){return math.map(e,r)}})}),math.import(replacements,{override:!0});